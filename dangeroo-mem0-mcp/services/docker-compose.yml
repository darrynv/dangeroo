name: dangeroo-mem0

services:
  dgroo-fast-api:
    build:
      context: ./dgroo-fast-api
      dockerfile: Dockerfile
    ports:
      - "8888:8000"  # External:Internal - Expose API on port 8888
    env_file:
      - .env
    networks:
      - dangeroo_network
    volumes:
      # We use bind mounts to make development easier
      - ./data/history:/app/data/history
      - ./data/chroma:/app/data/chroma
      - ./dgroo-fast-api:/app
    depends_on:
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_started
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      # These connect to the service name 'chroma' on its internal port
      #- CHROMA_HOST=chroma  # Service name in Docker network
      #- CHROMA_PORT=8000    # Internal ChromaDB port
      #- CHROMA_COLLECTION_NAME=memories
      #- CHROMA_PATH=/app/data/chroma
      #- NEO4J_URI=bolt://neo4j:7687
      #- NEO4J_USERNAME=neo4j
      #- NEO4J_PASSWORD=mem0graph
      #- HISTORY_DB_PATH=/app/data/history/history.db
  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    networks:
      - dangeroo_network
    ports:
      - "6333:6333"
      - "6334:6334"
    expose:
      - 6333
      - 6334
      - 6335
    configs:
      - source: qdrant_config
        target: /qdrant/config/production.yaml
    volumes:
      - ./data/qdrant:/qdrant/storage

  neo4j:
    image: neo4j:5.26.4
    networks:
      - dangeroo_network
    healthcheck:
      test: wget http://localhost:7687 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s
    ports:
      - "7474:7474" # HTTP browser interface
      - "7687:7687" # Bolt protocol
    volumes:
      - ./data/neo4j:/data  # Bind mount for development
    environment:
      - NEO4J_AUTH=neo4j/mem0graph
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true

# Define Docker volumes for data persistence
# Note: We're using bind mounts for development, but keeping
# these named volumes defined for potential production use
volumes:
  data:
  qdrant_data:
  neo4j_data:

networks:
  dangeroo_network:
    driver: bridge

configs:
  qdrant_config:
    content: |
      log_level: DEBUG
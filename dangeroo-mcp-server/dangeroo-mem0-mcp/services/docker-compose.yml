name: dangeroo-mem0

services:
  dgroo-fast-api:
    build:
      context: ./dgroo-fast-api
      dockerfile: Dockerfile
    ports:
      - "8888:8000"  # External:Internal - Expose API on port 8888
    env_file:
      - .env
    networks:
      - dangeroo_network
    volumes:
      # We use bind mounts to make development easier
      - ./data/history:/app/data/history
      - ./data/chroma:/app/data/chroma
      - ./dgroo-fast-api:/app
    depends_on:
      - chroma
      - neo4j
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      # These connect to the service name 'chroma' on its internal port
      - CHROMA_HOST=chroma  # Service name in Docker network
      - CHROMA_PORT=8000    # Internal ChromaDB port
      - CHROMA_COLLECTION_NAME=memories
      - CHROMA_PATH=/app/data/chroma
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=mem0graph
      - HISTORY_DB_PATH=/app/data/history/history.db

  otel-collector:
      image: otel/opentelemetry-collector-contrib:0.111.0
      command: ["--config=/etc/otel-collector-config.yaml"]
      volumes:
        - ${PWD}/otel-collector-config.yaml:/etc/otel-collector-config.yaml
      ports:
        - "4317:4317"  # OTLP gRPC
        - "4318:4318"  # OTLP HTTP
        - "13133:13133"  # Local health check
      networks:
        - dangeroo_network

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - dangeroo_network

  chroma:
    image: chromadb/chroma:latest
    volumes:
      - ./data/chroma:/chroma/chroma  # Bind mount for development
    ports:
      - "8000:8000"  # ChromaDB API is accessible at localhost:8000
    networks:
      - dangeroo_network
    environment:
      - CHROMA_OPEN_TELEMETRY__ENDPOINT=http://otel-collector:4317/
      - CHROMA_OPEN_TELEMETRY__SERVICE_NAME=chroma
    depends_on:
      - otel-collector
      - zipkin

  neo4j:
    image: neo4j:5.26.4
    networks:
      - dangeroo_network
    healthcheck:
      test: wget http://localhost:7687 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s
    ports:
      - "7474:7474" # HTTP browser interface
      - "7687:7687" # Bolt protocol
    volumes:
      - ./data/neo4j:/data  # Bind mount for development
    environment:
      - NEO4J_AUTH=neo4j/mem0graph
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true

# Define Docker volumes for data persistence
# Note: We're using bind mounts for development, but keeping
# these named volumes defined for potential production use
volumes:
  data:
  chroma_data:
  neo4j_data:

networks:
  dangeroo_network:
    driver: bridge